"use strict";
/// <reference types="@google-cloud/firestore" />
Object.defineProperty(exports, "__esModule", { value: true });
exports.BigBatch = void 0;
var MAX_OPERATIONS_PER_FIRESTORE_BATCH = 499;
var BigBatch = /** @class */ (function () {
    function BigBatch(_a) {
        var firestore = _a.firestore;
        this.firestore = firestore;
        this.currentBatch = firestore.batch();
        this.batchArray = [this.currentBatch];
        this.operationCounter = 0;
    }
    BigBatch.prototype.set = function (ref, data, options) {
        if (options === void 0) { options = {}; }
        this.currentBatch.set(ref, data, options);
        this.operationCounter++;
        if (this.operationCounter === MAX_OPERATIONS_PER_FIRESTORE_BATCH) {
            this.currentBatch = this.firestore.batch();
            this.batchArray.push(this.currentBatch);
            this.operationCounter = 0;
        }
    };
    BigBatch.prototype.update = function (ref, data) {
        this.currentBatch.update(ref, data);
        this.operationCounter++;
        if (this.operationCounter === MAX_OPERATIONS_PER_FIRESTORE_BATCH) {
            this.currentBatch = this.firestore.batch();
            this.batchArray.push(this.currentBatch);
            this.operationCounter = 0;
        }
    };
    BigBatch.prototype.delete = function (ref) {
        this.currentBatch.delete(ref);
        this.operationCounter++;
        if (this.operationCounter === MAX_OPERATIONS_PER_FIRESTORE_BATCH) {
            this.currentBatch = this.firestore.batch();
            this.batchArray.push(this.currentBatch);
            this.operationCounter = 0;
        }
    };
    BigBatch.prototype.commit = function () {
        var promises = this.batchArray.map(function (batch) { return batch.commit(); });
        return Promise.all(promises);
    };
    return BigBatch;
}());
exports.BigBatch = BigBatch;

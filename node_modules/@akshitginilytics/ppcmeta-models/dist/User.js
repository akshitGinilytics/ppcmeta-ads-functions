import { Timestamp } from "firebase-admin/firestore";
import firestoreClient from "./firestoreClient.js";
import { UserCustomer } from "./Customer.js";
export default class User {
    _userId;
    dataLoaders;
    created;
    defaultTeam;
    displayName;
    email;
    teamsMembership;
    refreshToken;
    refreshTokenAddedAt;
    customers;
    constructor(dataLoaders, userId) {
        this._userId = userId;
        this.created = Timestamp.now();
        this.defaultTeam = "";
        this.displayName = "";
        this.email = "";
        this.teamsMembership = {};
        this.refreshToken = "";
        this.refreshTokenAddedAt = Timestamp.fromDate(new Date(0));
        this.customers = [];
        this.dataLoaders = dataLoaders;
    }
    get userId() {
        if (!this._userId) {
            throw new Error("Please set user id before any operation.");
        }
        return this._userId;
    }
    set userId(userId) {
        if (userId.length < 5) {
            throw new Error("Invalid User Id");
        }
        this._userId = userId;
    }
    setAttributes(data) {
        if (data.userId) {
            this.userId = data.userId;
        }
        const user = { ...this.toJson(), ...data };
        this.created = user.created;
        this.defaultTeam = user.defaultTeam;
        this.displayName = user.displayName;
        this.email = user.email;
        this.teamsMembership = user.teamsMembership;
        this.refreshToken = user.refreshToken || "";
        this.refreshTokenAddedAt = user.refreshTokenAddedAt || Timestamp.fromDate(new Date(0));
    }
    toJson() {
        return {
            userId: this.userId,
            email: this.email,
            defaultTeam: this.defaultTeam,
            displayName: this.displayName,
            created: this.created,
            teamsMembership: this.teamsMembership,
            refreshToken: this.refreshToken,
            refreshTokenAddedAt: this.refreshTokenAddedAt,
        };
    }
    toGraphQLType() {
        return {
            userId: this.userId,
            email: this.email,
            defaultTeam: this.defaultTeam,
            displayName: this.displayName,
            created: this.created.seconds,
            teamsMembership: Object.values(this.teamsMembership)
        };
    }
    async saveUser() {
        this.dataLoaders.user.clear(this.userId);
        return firestoreClient.collection("users").doc(this.userId).set(this.toJson());
    }
    updateUser(update) {
        this.dataLoaders.user.clear(this.userId);
        return firestoreClient.collection("users").doc(this.userId).update(update);
    }
    async getCustomerById(id) {
        return await this.dataLoaders.userCustomer.load(id);
    }
    async getCustomersById(customerIds) {
        const customers = await this.dataLoaders.userCustomer.loadMany(customerIds);
        return customers.filter(customer => customer !== null);
    }
    addTeamToUser(teamId, teamName, permission, setToDefault = false) {
        const update = {
            ['teamsMembership.' + teamId]: {
                id: teamId,
                name: teamName,
            }
        };
        if (setToDefault) {
            update.defaultTeam = teamId;
        }
        return firestoreClient.collection("users").doc(this.userId).update(update);
    }
    async getUser() {
        const user = await this.dataLoaders.user.load(this.userId);
        if (!user) {
            throw new Error("User not found");
        }
        this.setAttributes(user);
        return this;
    }
    getCustomers() {
        return UserCustomer.getUserCustomers(this.userId);
    }
}

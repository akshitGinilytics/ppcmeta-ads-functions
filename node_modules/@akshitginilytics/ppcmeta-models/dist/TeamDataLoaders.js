import firestoreClient from "./firestoreClient.js";
import { TeamCustomer } from "./Customer.js";
import { TeamCampaign } from "./Campaign.js";
import Team from "./Team.js";
import DataLoader from "dataloader";
import { mapper } from "./helper.js";
export default class TeamDataLoaders {
    teamId;
    addedCustomersIds = [];
    addedCampaignsIds = [];
    customersCampaigns = {};
    team;
    teamCampaign;
    teamCustomer;
    teamCampaignSettings;
    teamCustomerSettings;
    constructor(teamId) {
        this.teamId = teamId;
        this.team = new DataLoader(this.batchTeam.bind(this));
        this.teamCampaign = new DataLoader(this.batchTeamCampaigns.bind(this));
        this.teamCustomer = new DataLoader(this.batchTeamCustomers.bind(this));
        this.teamCustomerSettings = new DataLoader(this.batchTeamCustomerSettings.bind(this));
        this.teamCampaignSettings = new DataLoader(this.batchTeamCampaignSettings.bind(this));
    }
    setTeamId(teamId) {
        this.teamId = teamId;
    }
    async batchTeam(teamIds) {
        console.info("batchTeam", teamIds);
        const teamRefs = teamIds.map(id => firestoreClient.collection("teams").doc(id));
        console.log("teamRefs", teamRefs.map(ref => ref.path));
        const teamsSnapshot = await firestoreClient.getAll(...teamRefs);
        const teams = mapper(teamsSnapshot, teamIds);
        return teams.map((teamData) => {
            if (!teamData) {
                return null;
            }
            const team = new Team(this, teamData.teamId);
            team.setAttributes(teamData);
            return team;
        });
    }
    async batchTeamCampaigns(campaignIds) {
        console.info("batchTeamCampaigns", campaignIds);
        const campaignRefs = campaignIds.map(id => firestoreClient.collection("campaigns").doc(id));
        const campaignsSnapshot = await firestoreClient.getAll(...campaignRefs);
        const campaigns = mapper(campaignsSnapshot, campaignIds);
        return campaigns.map((campaignData) => {
            if (!campaignData) {
                return null;
            }
            const campaign = new TeamCampaign(this, campaignData.campaignId);
            campaign.setAttributes(campaignData);
            return campaign;
        });
    }
    async batchTeamCustomers(customerIds) {
        console.info("batchTeamCustomers", customerIds);
        const customerRefs = customerIds.map(id => firestoreClient.collection("customers").doc(id));
        const customersSnapshot = await firestoreClient.getAll(...customerRefs);
        const customers = mapper(customersSnapshot, customerIds);
        return customers.map((customerData) => {
            if (!customerData) {
                return null;
            }
            const customer = new TeamCustomer(this, customerData.teamId, customerData.customerId);
            customer.setAttributes(customerData);
            return customer;
        });
    }
    async batchTeamCustomerSettings(customerIds) {
        console.info("batchTeamCustomerSettings", customerIds);
        const customerSettingsRefs = customerIds.map(customerId => firestoreClient.collection("teams").doc(this.teamId).collection("customersSettings").doc(customerId));
        const customerSettingsSnapshot = await firestoreClient.getAll(...customerSettingsRefs);
        return mapper(customerSettingsSnapshot, customerIds);
    }
    async batchTeamCampaignSettings(campaignIds) {
        console.info("batchTeamCampaignSettings", campaignIds);
        const campaignSettingsRefs = campaignIds.map(campaignId => firestoreClient.collection("teams").doc(this.teamId).collection("campaignsSettings").doc(campaignId));
        const campaignSettingsSnapshot = await firestoreClient.getAll(...campaignSettingsRefs);
        return mapper(campaignSettingsSnapshot, campaignIds);
    }
    async getTeamCustomers() {
        if (this.addedCustomersIds.length) {
            return (await this.teamCustomer.loadMany(this.addedCustomersIds))
                .filter((customer) => customer !== null && !(customer instanceof Error));
        }
        const query = firestoreClient.collection("customers").where("teamId", "==", this.teamId);
        const snapshot = await query.get();
        return snapshot.docs.map(doc => {
            const customer = new TeamCustomer(this, this.teamId, doc.id);
            customer.setAttributes(doc.data());
            this.teamCustomer.prime(doc.id, customer);
            this.addedCustomersIds.push(doc.id);
            return customer;
        });
    }
    async getTeamCampaigns() {
        if (this.addedCampaignsIds.length) {
            return (await this.teamCampaign.loadMany(this.addedCampaignsIds))
                .filter((campaign) => campaign !== null && !(campaign instanceof Error));
        }
        const query = firestoreClient.collection("campaigns").where("teamId", "==", this.teamId);
        const snapshot = await query.get();
        return snapshot.docs.map(doc => {
            const campaign = new TeamCampaign(this, doc.id);
            campaign.setAttributes(doc.data());
            this.teamCampaign.prime(doc.id, campaign);
            return campaign;
        });
    }
    async getCustomersCampaigns(customerId) {
        if (this.customersCampaigns[customerId]) {
            return this.customersCampaigns[customerId];
        }
        const query = firestoreClient.collection("campaigns")
            .where("customerId", "==", customerId)
            .where("teamId", "==", this.teamId);
        console.log("customerId", customerId);
        console.log("this.teamId", this.teamId);
        const snapshot = await query.get();
        this.customersCampaigns[customerId] = snapshot.docs.map(doc => {
            const campaign = new TeamCampaign(this, doc.id);
            campaign.setAttributes(doc.data());
            this.teamCampaign.prime(doc.id, campaign);
            return campaign;
        });
        return this.customersCampaigns[customerId];
    }
}

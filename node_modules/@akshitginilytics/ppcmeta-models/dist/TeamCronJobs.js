import firestoreClient from "./firestoreClient.js";
import { Timestamp } from "firebase-admin/firestore";
export default class TeamCronJobs {
    teamData;
    teamId;
    ownerId;
    ownerRefreshToken;
    campaignsByCustomer;
    campaignsCount;
    lastCronJob;
    isCronFailing = false;
    lastFailedCronJob;
    reference;
    constructor(team, ownerRefreshToken = undefined) {
        this.teamData = team;
        this.teamId = team.teamId;
        this.ownerId = team.ownerId;
        this.ownerRefreshToken = ownerRefreshToken || "";
        this.campaignsByCustomer = team.campaignsByCustomer;
        this.campaignsCount = team.campaignsCount;
        this.lastCronJob = Timestamp.now();
        this.lastFailedCronJob = Timestamp.fromDate(new Date(0));
        this.isCronFailing = false;
        this.reference = firestoreClient.collection("__cronCampaignsUpdate").doc(this.teamData.teamId);
    }
    setAttributes(cronJobData) {
        const data = { ...this.toJson(), ...cronJobData };
        this.ownerId = data.ownerId;
        this.ownerRefreshToken = data.ownerRefreshToken;
        this.campaignsByCustomer = data.campaignsByCustomer;
    }
    toJson() {
        return {
            teamId: this.teamId,
            ownerId: this.ownerId,
            ownerRefreshToken: this.ownerRefreshToken,
            campaignsByCustomer: this.campaignsByCustomer,
            campaignsCount: this.campaignsCount,
            lastCronJob: this.lastCronJob,
            lastFailedCronJob: this.lastFailedCronJob,
            isCronFailing: this.isCronFailing
        };
    }
    async getCronJob() {
        const reference = firestoreClient.collection("cronJobs").doc("campaignsUpdate").collection("teams").doc(this.teamData.teamId);
        const doc = await reference.get();
        if (doc.exists) {
            this.setAttributes(doc.data());
            return doc.data();
        }
        return null;
    }
    async createCronJob(ownerRefreshToken = undefined) {
        if (!this.ownerRefreshToken && !ownerRefreshToken) {
            throw new Error("Please set owner refresh token before creating cron job.");
        }
        const refreshToken = ownerRefreshToken || this.ownerRefreshToken;
        const data = { ...this.toJson(), ownerRefreshToken: refreshToken };
        return await this.reference.set(data, { merge: true });
    }
    async updateCronJob(data) {
        this.setAttributes(data);
        return await this.reference.update(data);
    }
    async removeCronJob() {
        return await this.reference.delete();
    }
}

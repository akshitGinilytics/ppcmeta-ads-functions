import { Timestamp } from "firebase-admin/firestore";
import { BigBatch } from "@qualdesk/firestore-big-batch";
import firestoreClient from "./firestoreClient.js";
class Campaign {
    _campaignId;
    campaignBudget = { amount_micros: 0, budgetId: "", resourceName: "" };
    firstImportedAt;
    customerId;
    lastUpdated;
    metrics = { allConversions: 0, averageCPC: 0, clicks: 0, costMicros: 0, impressions: 0, xDaysAverageCost: 0 };
    name;
    ownerId;
    resourceName;
    status;
    teamId;
    dataLoader;
    constructor(dataLoaders, campaignId) {
        this._campaignId = campaignId;
        this.firstImportedAt = Timestamp.now();
        this.lastUpdated = Timestamp.now();
        this.customerId = "";
        this.name = "";
        this.ownerId = "";
        this.resourceName = "";
        this.status = "UNKNOWN";
        this.teamId = "";
        this.dataLoader = dataLoaders;
    }
    get campaignId() {
        return this._campaignId;
    }
    static async getCampaign(dataLoader, campaignId) {
        const campaign = new Campaign(dataLoader, campaignId);
        await campaign.getCampaign();
        return campaign;
    }
    async getCampaign() {
        throw new Error("Not implemented");
    }
    _setAttributes(campaignData) {
        this.campaignBudget = campaignData.campaignBudget;
        this.firstImportedAt = campaignData.firstImportedAt;
        this.customerId = campaignData.customerId;
        this.lastUpdated = campaignData.lastUpdated;
        this.metrics = campaignData.metrics;
        this.name = campaignData.name;
        this.ownerId = campaignData.ownerId;
        this.resourceName = campaignData.resourceName;
        this.status = campaignData.status;
        this.teamId = campaignData.teamId;
    }
    setAttributes(campaignData) {
        const data = { ...this.toJson(), ...campaignData };
        this._setAttributes(data);
    }
    toJson() {
        return {
            campaignBudget: this.campaignBudget,
            campaignId: this.campaignId,
            firstImportedAt: this.firstImportedAt,
            customerId: this.customerId,
            lastUpdated: this.lastUpdated,
            metrics: this.metrics,
            name: this.name,
            ownerId: this.ownerId,
            resourceName: this.resourceName,
            status: this.status,
            teamId: this.teamId,
        };
    }
}
export class TeamCampaign extends Campaign {
    dataLoader;
    constructor(dataLoader, campaignId) {
        super(dataLoader, campaignId);
        this.dataLoader = dataLoader;
    }
    async getCampaign() {
        const campaign = await this.dataLoader.teamCampaign.load(this.campaignId);
        if (campaign === null) {
            throw new Error(`Campaign ${this.campaignId} not found`);
        }
        this._setAttributes(campaign);
        return this;
    }
    static async batchRemoveCampaigns(campaigns, team) {
        const batch = new BigBatch({ firestore: firestoreClient });
        await Promise.all([...campaigns.map(async (campaign) => campaign.getCampaign()), team.getTeam()]);
        campaigns.forEach(campaign => {
            batch.delete(firestoreClient.doc(`campaigns/${campaign.campaignId}`));
            batch.update(firestoreClient.doc(`teams/${team.teamId}/campaignsSettings/${campaign.campaignId}`), {
                isAdded: false
            });
        });
        await batch.commit();
    }
}
export class UserCampaign extends Campaign {
    dataLoader;
    ownerId;
    constructor(dataloader, ownerId, customerId, campaignId) {
        super(dataloader, campaignId);
        this.ownerId = ownerId;
        this.customerId = customerId;
        this.dataLoader = dataloader;
    }
    async getCampaign() {
        const key = `${this.customerId}/${this.campaignId}`;
        const campaign = await this.dataLoader.userCampaign.load(key);
        if (campaign === null) {
            throw new Error(`Campaign ${this.campaignId} not found`);
        }
        super._setAttributes(campaign.toJson());
        return this;
    }
}

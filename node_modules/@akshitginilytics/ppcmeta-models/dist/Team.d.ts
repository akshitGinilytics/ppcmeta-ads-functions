import { Timestamp } from "firebase-admin/firestore";
import { TeamCustomer, UserCustomer } from "./Customer.js";
import { UserCampaign } from "./Campaign.js";
import TeamDataLoaders from "./TeamDataLoaders.js";
import { CampaignsByCustomer, TeamDataModel, TeamMemberInterface, UserInterface, Role } from "@GeneralTypes";
import { Team as TeamGQL } from "@GraphqlTypes";
import User from "./User.js";
export default class Team implements TeamDataModel {
    private readonly _teamId;
    dataLoaders: TeamDataLoaders;
    created: Timestamp;
    members: Record<string, TeamMemberInterface>;
    name: string;
    ownerId: string;
    campaignsByCustomer: CampaignsByCustomer;
    campaignsCount: number;
    constructor(dataLoaders: TeamDataLoaders, teamId: string);
    get teamId(): string;
    static createTeam(teamName: string, ownerUser: Readonly<UserInterface>, permission: Role): Promise<Team>;
    private checkIfCustomersAreNotPartOfAnotherTeam;
    addCustomers(customers: UserCustomer[]): Promise<FirebaseFirestore.WriteResult[]>;
    getCustomers(): Promise<TeamCustomer[]>;
    getCustomersById(customerIds: string[]): Promise<(TeamCustomer)[]>;
    removeCustomers(customerIds: string[]): Promise<FirebaseFirestore.WriteResult[]>;
    setAttributes(attributes: Partial<TeamDataModel>): void;
    toJson(): TeamDataModel;
    toGraphQLType(): TeamGQL;
    getTeam(): Promise<this>;
    static getTeamById(dataloader: TeamDataLoaders, teamId: string): Promise<Team>;
    addMember(user: User, role?: Role): Promise<FirebaseFirestore.WriteResult[]>;
    addCampaigns(campaigns: UserCampaign[]): Promise<FirebaseFirestore.WriteResult[]>;
    removeCampaigns(campaignsByCustomer: CampaignsByCustomer): Promise<void>;
    clearCache(): void;
    renameTeam(name: string): Promise<FirebaseFirestore.WriteResult[]>;
}

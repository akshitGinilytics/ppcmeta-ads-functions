import DataLoader from "dataloader";
import firestoreClient from "./firestoreClient.js";
async function batchUsers(userIds) {
    const userRefs = userIds.map(id => firestoreClient.collection("users").doc(id));
    const users = await firestoreClient.getAll(...userRefs);
    return mapper(users, userIds);
}
async function batchTeamCampaigns(campaignIds) {
    const campaignRefs = campaignIds.map(id => firestoreClient.collection("campaigns").doc(id));
    const campaignsSnapshot = await firestoreClient.getAll(...campaignRefs);
    return mapper(campaignsSnapshot, campaignIds);
}
async function batchUserCampaigns(campaignIds) {
    const campaignRefs = campaignIds.map(id => {
        const [userId, customerId, campaignId] = id.split("/");
        return firestoreClient.collection("users").doc(userId)
            .collection("customers").doc(customerId)
            .collection("campaigns").doc(campaignId);
    });
    const campaignsSnapshot = await firestoreClient.getAll(...campaignRefs);
    return mapper(campaignsSnapshot, campaignIds.map(id => id.split("/")[2]));
}
export const userDataLoader = new DataLoader(batchUsers);
export const teamCampaignDataLoader = new DataLoader(batchTeamCampaigns);
export const userCampaignDataLoader = new DataLoader(batchUserCampaigns);
function mapper(snapshot, docIds) {
    const dictionary = {};
    for (let i = 0; i < snapshot.length; i++) {
        const document = snapshot[i].data();
        if (!document) {
            continue;
        }
        dictionary[snapshot[i].id] = document;
    }
    return docIds.map((id) => dictionary[id] ?? null);
}
